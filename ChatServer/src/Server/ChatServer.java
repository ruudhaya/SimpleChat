/*
 * ChatServer.java
 *
 * Created on April 5, 2008, 7:01 PM
 */

package Server;

import java.io.*;
import java.net.*;
import java.sql.*;
import java.util.Hashtable;
import java.util.StringTokenizer;

/**
 *
 * @author  user12
 */
public class ChatServer extends javax.swing.JFrame implements Runnable {
    Connection c1=null;
    Statement s1=null;
    ResultSet rs=null;
    PreparedStatement ps=null;
    
    ServerSocket SerSocket=null;
    Thread ToAcceptConnection=null;
    
    Hashtable Sokets=new Hashtable();
    Hashtable Names=new Hashtable();
    /** Creates new form ChatServer */
    public ChatServer() {
        initComponents();
        System.out.println("................................Server...................................");
        this.setTitle("Our Chat");
        this.setBounds(400,0,310,350);
        this.setResizable(false);
        this.setDefaultLookAndFeelDecorated(false);
        UserList.setVisible(false);
        userslbl.setVisible(false);
        UserCountlbl.setVisible(false);
        UserCounttxt.setVisible(false);
        privroomlbl.setVisible(false);
        privateUsersList.setVisible(false);
        UserCounttxt.setText("0");
        
        ToAcceptConnection = new Thread(this);      
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        Frontpanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        UserCountlbl = new javax.swing.JLabel();
        UserList = new java.awt.List();
        UserCounttxt = new javax.swing.JTextField();
        Startbtn = new javax.swing.JButton();
        userslbl = new javax.swing.JLabel();
        privateUsersList = new java.awt.List();
        privroomlbl = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        Frontpanel.setLayout(null);

        Frontpanel.setBackground(new java.awt.Color(102, 102, 0));
        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("THE SERVER");
        Frontpanel.add(jLabel1);
        jLabel1.setBounds(100, 0, 110, 30);

        UserCountlbl.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14));
        UserCountlbl.setForeground(new java.awt.Color(255, 255, 255));
        UserCountlbl.setText("Number of Users online");
        Frontpanel.add(UserCountlbl);
        UserCountlbl.setBounds(10, 230, 200, 30);

        UserList.setFont(new java.awt.Font("Impact", 0, 14));
        Frontpanel.add(UserList);
        UserList.setBounds(30, 70, 100, 140);

        UserCounttxt.setBackground(new java.awt.Color(153, 153, 0));
        UserCounttxt.setFont(new java.awt.Font("Impact", 0, 14));
        UserCounttxt.setForeground(new java.awt.Color(255, 255, 255));
        UserCounttxt.setOpaque(false);
        Frontpanel.add(UserCounttxt);
        UserCounttxt.setBounds(210, 230, 60, 30);

        Startbtn.setFont(new java.awt.Font("Broadway", 0, 14));
        Startbtn.setText("START SERVER");
        Startbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartbtnActionPerformed(evt);
            }
        });

        Frontpanel.add(Startbtn);
        Startbtn.setBounds(70, 280, 150, 30);

        userslbl.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14));
        userslbl.setForeground(new java.awt.Color(255, 255, 255));
        userslbl.setText("USERS");
        Frontpanel.add(userslbl);
        userslbl.setBounds(40, 50, 70, 17);

        privateUsersList.setFont(new java.awt.Font("Impact", 0, 14));
        Frontpanel.add(privateUsersList);
        privateUsersList.setBounds(140, 70, 150, 140);

        privroomlbl.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14));
        privroomlbl.setForeground(new java.awt.Color(255, 255, 255));
        privroomlbl.setText("PRIVATE ROOMS");
        Frontpanel.add(privroomlbl);
        privroomlbl.setBounds(140, 50, 140, 17);

        getContentPane().add(Frontpanel);
        Frontpanel.setBounds(0, 0, 310, 330);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartbtnActionPerformed
        
            try 
            {
                SerSocket=new ServerSocket(5534);
            } 
            catch (Exception ex) 
            {
             ex.printStackTrace();
            }
                
            Startbtn.setVisible(false);        
            UserList.setVisible(true);
            userslbl.setVisible(true);
            UserCountlbl.setVisible(true);
            UserCounttxt.setVisible(true);
            privateUsersList.setVisible(true);
            privroomlbl.setVisible(true);                   
        
            ToAcceptConnection.start();        
        
    }//GEN-LAST:event_StartbtnActionPerformed
    
    
    public void run()
    {        
        try
        {
         while(true)
         {
            Socket s=SerSocket.accept();
            System.out.println("Connected to "+s.getInetAddress());                
                  
            HandleSocketPerClient hspc=new HandleSocketPerClient(s);hspc.start();           
         }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            System.out.println(e.toString());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatServer().setVisible(true);
            }
        });
    }    
    
    public void SendListAll()
    {
        String msg="3";
        int i=0;
        for(i=0;i<UserList.getItemCount();i++)          // Create userList as Message...
        {
            msg=msg+"|"+UserList.getItem(i);
        } 
        
        for(i=0;i<UserList.getItemCount();i++)
        {
            try
            {
                Socket tempS=(Socket)Names.get(UserList.getItem(i));
                DataOutputStream dos=new DataOutputStream(tempS.getOutputStream());
                dos.writeUTF(msg);                
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Frontpanel;
    private javax.swing.JButton Startbtn;
    private javax.swing.JLabel UserCountlbl;
    private javax.swing.JTextField UserCounttxt;
    private java.awt.List UserList;
    private javax.swing.JLabel jLabel1;
    private java.awt.List privateUsersList;
    private javax.swing.JLabel privroomlbl;
    private javax.swing.JLabel userslbl;
    // End of variables declaration//GEN-END:variables
    
    class HandleSocketPerClient extends Thread
    {
        Socket s=null;
        String OwnerName =null;
        DataInputStream InFromClient=null;
        DataOutputStream OutToClient=null;        
        BufferedReader br=null;
        BufferedWriter bw=null;
        Connection c1=null;
        Statement s1=null;
        ResultSet rs=null;
        PreparedStatement ps=null;
        DataInputStream dis=null;
        
        public HandleSocketPerClient(Socket s)
        {
            this.s=s;
            OwnerName=(String)Sokets.get(s);
            try
            {
                InFromClient=new DataInputStream(s.getInputStream());
                OutToClient=new DataOutputStream(s.getOutputStream());                
                
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                c1=DriverManager.getConnection("Jdbc:Odbc:UsersDB");
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        
        public void run()
        {
            try
            {
                while(true)
                {
                    String Msg=InFromClient.readUTF();
                    System.out.println("Message "+Msg+" From  "+s.getInetAddress());
                    ActOnMessageType(Msg);
                    System.out.println(Msg);                    
                }
            }
            catch(Exception e)
            {
                System.out.println(e.toString());
            }
            finally
            {
                synchronized(Sokets)
                {                
                    try 
                    {
                        String nm=(String)Sokets.get(s);
                         int i=0;          
                        while(!nm.equalsIgnoreCase(UserList.getItem(i)))
                        {            
                                i++;
                        }
                        UserList.remove(i);
             
                        UserCounttxt.setText(String.valueOf(Integer.parseInt(UserCounttxt.getText())-1));
                        
                        SendListAll();
                        
                        Names.remove(nm);
                        Sokets.remove(s);
                        s.close();
                    }
                    catch (IOException ex) 
                    {
                        ex.printStackTrace();
                    }
                }   
            }
        }
        
        public void ActOnMessageType(String msg)
        {
            
            
            int UserLength=0,PassLength=0,NickLength=0;
            String temp="",UserName="",PsWord="",NickName="",tempUN="",tempPW="",tempNN="";
            
            StringTokenizer st=new StringTokenizer(msg,"|");
            int MsgType=Integer.parseInt(st.nextToken());
            try
            {
                s1=c1.createStatement();
                
                    switch(MsgType) 
                    {
                        case 1:                 // SignIn Message...
                        {
                            System.out.println("Its of Type 1...");
                            String tm[] = new String[2];
                            for(int i=0;st.hasMoreTokens();i++)
                            {
                                tm[i]=st.nextToken();
                            }                            
                            UserName=tm[0];                            
                            PsWord=tm[1];  
                            System.out.println("User Name   : "+UserName);
                            System.out.println("PassWord : "+PsWord);
                                                        
                            rs=s1.executeQuery("select * from Users");
                            
                            while(rs.next())
                            {
                                tempUN=rs.getString("UserName");
                                tempPW=rs.getString("PassWord");
                                tempNN=rs.getString("NickName");
                                
                                if(tempUN.equalsIgnoreCase(UserName) && tempPW.equals(PsWord))
                                {
                                    UserList.add(tempNN);           // To add n the List...
                                    
                                    int cnt=Integer.parseInt(UserCounttxt.getText())+1; // To increase the count
                                    UserCounttxt.setText(String.valueOf(cnt));
                                    
                                    Names.put(tempNN,s);
                                    Sokets.put(s,tempNN);                                    
                                    
                                    OutToClient.writeUTF(msg+"|"+tempNN);
                                    
                                    SendListAll();
                                    return;
                                }
                            }
                            OutToClient.writeUTF("7|Incorrect UserName / PassWord...");
                                                        
                            break;
                        }    
                        case 2:
                        {
                            System.out.println("Its of Type 2...");
                            String tm[] = new String[3];
                            for(int i=0;st.hasMoreTokens();i++)
                            {
                                tm[i]=st.nextToken();
                            }                            
                            UserName=tm[0]; 
                            PsWord=tm[1];  
                            NickName=tm[2];
                            System.out.println("New User Name   : "+UserName);
                            System.out.println("New PassWord    : "+PsWord);
                            System.out.println("New Nick Name   : "+NickName);
                                                        
                            try
                            {
                                s1.executeUpdate("insert into Users values('"+UserName+"','"+PsWord+"','"+NickName+"')");
                                
                                 UserList.add(NickName);           // To add n the List...
                                    
                                 int cnt=Integer.parseInt(UserCounttxt.getText())+1; // To increase the count
                                 UserCounttxt.setText(String.valueOf(cnt));
                                    
                                 Names.put(NickName,s);
                                 Sokets.put(s,NickName);
                                
                                 OutToClient.writeUTF(msg);
                                
                                 SendListAll();
                            }
                            catch(Exception e)
                            {
                                String tmp="Can't Register.. Try Again...";
                                OutToClient.writeUTF("7|"+tmp+e.toString());
                            }
                            s1.close();
                            
                            break;                        
                        }
                        case 4:
                        {                            
                            String MsgtoAll=st.nextToken();
                            
                            String UserNick=(String)Sokets.get(s);
                            
                            MsgtoAll="4|"+UserNick+" : "+MsgtoAll;
                            for(int i=0;i<UserList.getItemCount();i++)
                            {
                                try
                                {
                                    Socket tempS=(Socket)Names.get(UserList.getItem(i));
                                    DataOutputStream dos=new DataOutputStream(tempS.getOutputStream());
                                    dos.writeUTF(MsgtoAll);                
                                }
                                catch(Exception e)
                                {
                                    e.printStackTrace();
                                }
                            }
                            break;
                        }
                        case 5:
                        {                                         // Send the other ones name to the users of the pair to open a new frame..                            
                            String From=st.nextToken();
                            String To=st.nextToken();
                            privateUsersList.add(From+"-"+To);
                            Socket ts=(Socket)Names.get(From);                            
                            DataOutputStream dos=new DataOutputStream(ts.getOutputStream());
                            dos.writeUTF("5|"+To);
                            ts=(Socket)Names.get(To);
                            dos=new DataOutputStream(ts.getOutputStream());
                            dos.writeUTF("5|"+From);
                            break;
                        }
                        case 6:                 // Conversation in the Private room is got and forward to the pair belongs to that rooms....
                        {
                            try
                            {                         
                                String To=st.nextToken();
                                String sender=(String)Sokets.get(s);
                                String Msg=st.nextToken();
                                OutToClient.writeUTF("6|"+To+"|"+sender+" : "+Msg);      // Message to the client to say that the Room with "To" is the message Msg

                                Socket ts=(Socket)Names.get(To);
                                DataOutputStream dos=new DataOutputStream(ts.getOutputStream());
                                dos.writeUTF("6|"+sender+"|"+sender+" : "+Msg);
                            }
                            catch(Exception e)
                            {
                                e.printStackTrace();
                            }
                            break;
                        }
                        case 8:
                        {
                               try
                               {
                                   String Toclose=st.nextToken();
                                   
                                   for(int i=0;i<privateUsersList.getItemCount();i++)
                                    {
                                       String temp1=privateUsersList.getItem(i);
                                       if(temp1.contains((CharSequence)Toclose))
                                       {
                                           StringTokenizer st1=new StringTokenizer(temp1,"-");
                                           String From=st1.nextToken();
                                           String To=st1.nextToken();
                                           if(Toclose.equalsIgnoreCase(From))
                                           {
                                               Socket Sck=(Socket)Names.get(To);
                                               DataOutputStream dos=new DataOutputStream(Sck.getOutputStream());
                                               dos.writeUTF("8|"+From);
                                           }
                                           else
                                           {
                                               Socket Sck=(Socket)Names.get(From);
                                               DataOutputStream dos=new DataOutputStream(Sck.getOutputStream());
                                               dos.writeUTF("8|"+To);
                                           }
                                           privateUsersList.remove(i);
                                       }
                                      /*  Socket tempS=(Socket)Names.get(UserList.getItem(i));
                                        DataOutputStream dos=new DataOutputStream(tempS.getOutputStream());
                                        dos.writeUTF(MsgtoAll);                */
                                    }
                               }
                               catch(Exception e)
                               {
                                   e.printStackTrace();
                               }
                               break;
                        }
                        case 9:
                        {                            
                            String DestName=st.nextToken();
                            String FileName=st.nextToken();
                            OwnerName=(String)Sokets.get(s);
                            Socket sket=(Socket)Names.get(DestName);
                            DataOutputStream dos= new DataOutputStream(sket.getOutputStream());             
                            System.out.println(OwnerName + FileName);
                            dos.writeUTF("10|"+OwnerName+"|"+FileName);             
                            break;
                        }       // End of case 9
                        case 10:        // Message from the client whether he is ready to recive file or not...
                        {
                            try
                            {                                   
                                String AcceptFlag=st.nextToken();
                                String ReceiverName=st.nextToken();     // One who first propose to send the file...
                                OwnerName=(String)Sokets.get(s);
                                Socket RecSkt=(Socket)Names.get(ReceiverName);
                                DataOutputStream RecS=new DataOutputStream(RecSkt.getOutputStream());
                                if(AcceptFlag.equalsIgnoreCase("1"))
                                {
                                    System.out.println("******************************************");                                
                                    Socket OwnerSkt=(Socket)Names.get(OwnerName);    
                                    DataOutputStream OwnS=new DataOutputStream(OwnerSkt.getOutputStream());

                                    String Msg1="11|1|1|"+OwnerName;
                                    String Msg2="11|1|0|"+ReceiverName;

                                    RecS.writeUTF(Msg1);
                                    OwnS.writeUTF(Msg2);     
                                    
                                    HandleFileTransfer hft=new HandleFileTransfer(OwnerSkt.getInetAddress(),RecSkt.getInetAddress());
                                }
                                else
                                {
                                    String Msg="11|0|"+OwnerName;
                                    RecS.writeUTF(Msg);
                                }
                            }
                            catch(Exception e)
                            {
                                e.printStackTrace();
                            }
                            break;
                        }       // End of Case 10
                        case 11:
                        {
                            break;
                        }
                     
                    }           // Close of Switch...                
                    
               }
               catch(Exception e)
               {
                 e.printStackTrace();
               }
         }      // Close of Run
        
    }           // Close of HandleClient Class
    
    
    class HandleFileTransfer extends Thread
    {
        InetAddress Receiver=null;
        InetAddress Sender=null;
        ServerSocket Ss=null;
        BufferedInputStream FromSender=null;
        BufferedOutputStream ToReceiver=null;
        int count=0;
        
        public HandleFileTransfer(InetAddress Receiver,InetAddress Sender)
        {
            this.Receiver=Receiver;
            this.Sender=Sender;
            try {
                Ss=new ServerSocket(20);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            this.start();
            //transferFile();
        }
        
        public void run()
        {
          try
          {
              Socket client1=Ss.accept();
              Socket client2=Ss.accept();
              int totalDataRead=0;
              int totalSizeWritten = 0;
              int totalSizeTransferred=0;
              int DATA_SIZE = 20480;
              byte[] inData = new byte[DATA_SIZE];
              //if((client1.getInetAddress().equals(Receiver)&&client2.getInetAddress().equals(Sender))  ||  (client1.getInetAddress().equals(Sender)&&client2.getInetAddress().equals(Receiver)) )
              if(client1.getInetAddress().equals(Receiver))
              {
                  FromSender=new BufferedInputStream(client2.getInputStream());
                  ToReceiver=new BufferedOutputStream(client1.getOutputStream());                  
              }
              else
              {
                  FromSender=new BufferedInputStream(client1.getInputStream());
                  ToReceiver=new BufferedOutputStream(client2.getOutputStream());                                
              }
              
              while((totalDataRead = FromSender.read(inData, 0, inData.length)) >= 0)
              {
                    ToReceiver.write(inData, 0, totalDataRead);
                    totalSizeTransferred = totalSizeTransferred + totalDataRead;
                    System.out.println(totalSizeTransferred);                  
              }
              FromSender.close();
              ToReceiver.close();
              Ss.close();
          }
          catch(Exception e)
          {
              e.printStackTrace();
          }
        }
        
    }
    
    
    
    
    
}               // Close of Main Class



/*          Cutted as No Need...
 *              
 *          //UserLength=Integer.parseInt(String.valueOf(msg.charAt(1)));
            //UserName=msg.substring(2,UserLength+2);
            //PassLength=Integer.parseInt(String.valueOf(msg.charAt(UserLength+2)));
            //PsWord=msg.substring(UserLength+3,UserLength+PassLength+3);
 *
            ResultSetMetaData rsmd=rs.getMetaData();      // One way of getting the column count...
            for(int i=0;i<rsmd.getColumnCount();i++)
            {
               rs.next();
                 ...
            }
 *
 *          br=new BufferedReader(new InputStreamReader(FileIn));     // while using the Files instead of database...
            while((temp=br.readLine())!=null)
            {
                System.out.println(temp);
                if(temp.startsWith(UserName+" "))
                {
                     if(temp.endsWith(" "+PsWord))
                     {
                          OutToClient.writeUTF(msg+"1");   
                          System.out.println(msg+"1");
                          break;
                     }                                
                 }
             }
                UserLength=Integer.parseInt(String.valueOf(msg.charAt(1)));
                            UserName=msg.substring(2,UserLength+2);
                            System.out.println("User Name   : "+UserName);
                            PassLength=Integer.parseInt(String.valueOf(msg.charAt(UserLength+2)));
                            PsWord=msg.substring(UserLength+3,UserLength+PassLength+3);
                            System.out.println("PassWord : "+PsWord);
                            NickLength=Integer.parseInt(String.valueOf(msg.charAt(UserLength+PassLength+3)));
                            NickName=msg.substring(UserLength+PassLength+4,UserLength+PassLength+NickLength+4);
 */